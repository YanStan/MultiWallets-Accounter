// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoneyCounter;

namespace MoneyCounter.Migrations
{
    [DbContext(typeof(MoneyCounterContext))]
    partial class MoneyCounterContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("MoneyCounter.Models.BalanceMultiplication", b =>
                {
                    b.Property<int>("BMId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdjunctionSum")
                        .HasColumnType("TEXT");

                    b.Property<int>("TransactionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BMId");

                    b.HasIndex("TransactionId")
                        .IsUnique();

                    b.ToTable("BalanceMultiplications");
                });

            modelBuilder.Entity("MoneyCounter.Models.FoundersTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DatetimeOfFinish")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FromWallet")
                        .HasColumnType("TEXT");

                    b.Property<string>("MoneyAmount")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subcategory")
                        .HasColumnType("TEXT");

                    b.Property<string>("SumOnAimWallet")
                        .HasColumnType("TEXT");

                    b.Property<string>("SumOnSourceWallet")
                        .HasColumnType("TEXT");

                    b.Property<string>("ToWallet")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FoundersTransactions");
                });

            modelBuilder.Entity("MoneyCounter.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DatetimeOfFinish")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FromWallet")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsGain")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReversal")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsStart")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MoneyAmount")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subcategory")
                        .HasColumnType("TEXT");

                    b.Property<string>("SumOnAimWallet")
                        .HasColumnType("TEXT");

                    b.Property<string>("SumOnSourceWallet")
                        .HasColumnType("TEXT");

                    b.Property<string>("ToWallet")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("MoneyCounter.Models.TransactionCategory", b =>
                {
                    b.Property<string>("CategoryKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubCategoryKey")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryKey", "SubCategoryKey");

                    b.ToTable("TransactionCategories");
                });

            modelBuilder.Entity("MoneyCounter.Models.TransactionIDForDeletion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdminThatAllowed")
                        .HasColumnType("TEXT");

                    b.Property<int?>("AdminThatAllowedId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OperatorThatRequests")
                        .HasColumnType("TEXT");

                    b.Property<int>("OperatorThatRequestsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TransactionId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("WasDeletionAllowed")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("TransactionIDsForDeletion");
                });

            modelBuilder.Entity("MoneyCounter.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChatStatus")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MoneyCounter.Models.UserMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMainMenu")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MessageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("UserMessages");
                });

            modelBuilder.Entity("MoneyCounter.Models.WhiteUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WhiteList");
                });

            modelBuilder.Entity("MoneyCounter.Models.BalanceMultiplication", b =>
                {
                    b.HasOne("MoneyCounter.Models.Transaction", "Transaction")
                        .WithOne("bM")
                        .HasForeignKey("MoneyCounter.Models.BalanceMultiplication", "TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("MoneyCounter.Models.Transaction", b =>
                {
                    b.Navigation("bM");
                });
#pragma warning restore 612, 618
        }
    }
}
